name: Main Branch CI Workflow

on:
  push:
    branches:
      - master
      - feature
  pull_request:
    branches:
      - master
      - feature

jobs:
  build:
    name: CI for Go
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
         scan-type: 'fs'
         ignore-unfixed: true
         format: 'sarif'
         output: 'trivy-results.sarif'
         severity: 'CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
         sarif_file: 'trivy-results.sarif'

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.22.1'

     # - name: Install JFrog CLI
     #   run: |
      #    curl -fL https://getcli.jfrog.io | sh
      #    sudo mv jfrog /usr/local/bin/

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Compile
        run: go build -v .

      - name: Unit Test
        run: go test -v ./...

      - name: Code Coverage
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
          go tool cover -html=coverage.out -o coverage.html
        
      - name: Upload Code Coverage Artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-out
          path: coverage.out

      - name: Upload Code Coverage HTML Artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-html
          path: coverage.html

      - name: Set JFrog CLI Path
        run: export PATH=$PATH:/usr/local/bin

    #  - name: Push Artifacts to JFrog
    #    run: |
    #     jfrog rt u  gitjfrog-libs-snapshot-local/ --url=https://shubhamtodo.jfrog.io/artifactory/gotodo-go-local/ --access-token=eyJ2ZXIiOiIyIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYiLCJraWQiOiJQMXBBZ19WSWNRWTZDb2pIYlFPMk1QcU1tcWlYRng2VnI2R3FWZUNsR2lrIn0.eyJzdWIiOiJqZmFjQDAxaHh0NDFqNGF3NThoMXY4N2U3d2UxNHBuL3VzZXJzL3NodWJoYW1jaGF2QGN5YmFnZS5jb20iLCJzY3AiOiJhcHBsaWVkLXBlcm1pc3Npb25zL2FkbWluIiwiYXVkIjoiKkAqIiwiaXNzIjoiamZmZUAwMWh4dDQxajRhdzU4aDF2ODdlN3dlMTRwbiIsImlhdCI6MTcxNTY3NjUyNSwianRpIjoiZWYwNGIzODctZGRjMC00M2YxLTgzOTAtZGQyZmE3YjMwNGViIn0.b5oLSIpRWsHqwX9dLHLrjUHtTidWcDkTRmTEXLFeaSf67mJIKzLy3UKAYJGUgME6ByBUKJS3FQyKDUA8eJLKw3TJ-p2o08fbZPSrofjqTCogeuUEVS98w5n4q4tdtjaXjwaidcZ--MnfqqPCkGPlRto18YIuctmW9V6O4n6WUPxp1jMTIdRRvVd-LNRSUo7HVP0t9qYrUgCOWeyFtQiAkEdQ8kNCUYjx4UPfWhM5r14K5_SN9sDBUUk4fhgExBPTtlqpV-gGkFN8FmY-5pjmfurgFvWWwzDmORVRtqUXzqAiofoYyv0Zzv7eLzruJBO4fmUTt0Hywv2zQU4km_unIw

      - name: Static Code Analysis
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=sonarintegration-1
            -Dsonar.projectKey=sonarintegration-1_go-todo-project
            -Dsonar.sources=./
            -Dsonar.go.coverage.reportPaths=coverage.out
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.pullrequest.provider=GitHub
            -Dsonar.pullrequest.github.repository=${{ github.repository }}
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Send notification on Slack using Webhooks - Success
        if: ${{ always() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Go project built successfully."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send notification on Slack using Webhooks - Failure
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Go build failed. Please check the build logs for details."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  coverage:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Download Code Coverage Artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage-out
          path: ./coverage

      - name: Verify Code Coverage
        run: |
          COVERAGE=$(go tool cover -func=./coverage/coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          THRESHOLD=5.0
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "Code coverage is below threshold: $COVERAGE%"
            exit 1
          else
            echo "Code coverage is above threshold: $COVERAGE%"
          fi
